@using CampOut.Models;
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>My CampOut!</title>
    <link 
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" 
      rel="stylesheet" 
      integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" 
      crossorigin="anonymous">
  </head>
  <body>

    <h3>Here are all the items in this destination:</h3>
    @* <h3>@Model.Destination</h3>*@

    <ol>
    @foreach (Item item in @Model["items"])
    {
      <li><a href='/mycampout/@Model["category"].Id/items/@item.Id'>@item.ItemName</a></li>
    }
    </ol>

    <p><a href='/mycampout/@Model["myCampOut"].Id/items/new'>Add a new item</a></p>
    
    <p><a href='/mycampout'>Return to category list</a></p>
    <p><a href='/'>Return to Main Page</a></p>

@*
  In the Show.cshtml file;
            We loop through all Items in the model. We passed the view a Dictionary containing key-value pairs, so we access Items with @Model["items"] square bracket notation.
            For each Item, we display its description in a <li>.
            We've also made each <li> a link to the path '/categories/@Model["category"].Id/items/@item.Id'. This will be the item's detail view. We already have an Item detail page associated with the Show() route on the ItemsController, but it's not at this super long path!
            *@

   
  </body>
</html>